package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"

	"github.com/jackc/pgx/v5"
	"github.com/joho/godotenv"

	"github.com/matwate/proyecto-datos/db"
	_ "github.com/matwate/proyecto-datos/docs" // docs is generated by Swag CLI
	"github.com/matwate/proyecto-datos/handler"
)

// @title        Proyecto de Ingenieria de  Datos API
// @version      1.0
// @description  This is the API for my project.
// @termsOfService http://swagger.io/terms/
// @host      https://amazed-flounder-wired.ngrok-free.app:8080
// @BasePath  /api/
// @schemes   http
func main() {
	// Load environment variables from .env file
	err := godotenv.Load()
	if err != nil {
		log.Println("No .env file found, using environment variables")
	}

	dbURL := os.Getenv("POSTGRES_URL")
	if dbURL == "" {
		log.Fatal("POSTGRES_URL environment variable is not set")
	}

	conn, err := pgx.Connect(context.Background(), dbURL)
	if err != nil {
		log.Fatalf("Unable to connect to database: %v\n", err)
	}
	defer conn.Close(context.Background())

	queries := db.New(conn)
	mux := http.NewServeMux()

	mux.HandleFunc("/v1/health", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		fmt.Fprintln(w, "OK HEALthY")
	})

	loginHandler := handler.LoginHandler(queries)
	mux.Handle("/v1/login", loginHandler)

	mux.HandleFunc("/v1/docs/", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "text/html; charset=utf-8")
		html := `<!DOCTYPE html>
<html>
  <head>
    <title>Redoc</title>
    <!-- needed for adaptive design -->
    <meta charset="utf-8"/>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link href="https://fonts.googleapis.com/css?family=Montserrat:300,400,700|Roboto:300,400,700" rel="stylesheet">

    <!--
    Redoc doesn't change outer page styles
    -->
    <style>
      body {
        margin: 0;
        padding: 0;
      }
    </style>
  </head>
  <body>
    <redoc spec-url='./swagger.yaml'></redoc>
    <script src="https://cdn.redoc.ly/redoc/latest/bundles/redoc.standalone.js"> </script>
  </body>
</html>
`
		fmt.Fprint(w, html)
	})

	mux.HandleFunc("/v1/docs/swagger.yaml", func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/x-yaml")
		w.Header().Set("Access-Control-Allow-Origin", "*")
		w.Header().Set("Access-Control-Allow-Methods", "GET, OPTIONS")
		w.Header().Set("Access-Control-Allow-Headers", "Content-Type")
		w.Header().Set("Access-Control-Allow-Credentials", "true")
		w.Header().Set("Access-Control-Max-Age", "86400") // 24 hours
		http.ServeFile(w, r, "./docs/swagger.yaml")
	})

	port := os.Getenv("PORT")
	if port == "" {
		port = "8080" // Default port if not specified
	}

	wrapped := use(mux, handler.LoggingMiddleware)
	log.Printf("Starting server on port %s...\n", port)
	if err := http.ListenAndServe(":"+port, wrapped); err != nil {
		log.Fatalf("Could not start server: %s\n", err)
	}
}

func use(r *http.ServeMux, middlewares ...func(next http.Handler) http.Handler) http.Handler {
	var s http.Handler
	s = r
	for _, mw := range middlewares {
		s = mw(s)
	}
	return s
}
