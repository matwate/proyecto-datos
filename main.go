package main

import (
	"context"
	"fmt"
	"log"
	"net/http"
	"os"

	"github.com/jackc/pgx/v5"
	"github.com/joho/godotenv"
	httpSwagger "github.com/swaggo/http-swagger"

	"github.com/matwate/proyecto-datos/db"
	_ "github.com/matwate/proyecto-datos/docs" // docs is generated by Swag CLI
	"github.com/matwate/proyecto-datos/handler"
)

// @title        Proyecto de Ingenieria de  Datos API
// @version      1.0
// @description  This is the API for my project.
// @termsOfService http://swagger.io/terms/

// @host      https://amazed-flounder-wired.ngrok-free.app:8080
// @BasePath  /v1
// @schemes   http
func main() {
	// Load environment variables from .env file
	err := godotenv.Load()
	if err != nil {
		log.Println("No .env file found, using environment variables")
	}

	dbURL := os.Getenv("POSTGRES_URL")
	if dbURL == "" {
		log.Fatal("POSTGRES_URL environment variable is not set")
	}

	conn, err := pgx.Connect(context.Background(), dbURL)
	if err != nil {
		log.Fatalf("Unable to connect to database: %v\n", err)
	}
	defer conn.Close(context.Background())

	queries := db.New(conn)

	mux := http.NewServeMux()
	mux.HandleFunc("/v1/health", func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(http.StatusOK)
		fmt.Fprintln(w, "OK HEALthY")
	})

	// Wrap the login handler with the LoggingMiddleware
	loginHandler := handler.LoginHandler(queries)
	mux.Handle("/v1/login", loginHandler)

	mux.HandleFunc("/vi/swagger/", httpSwagger.Handler(
		httpSwagger.URL("https://amazed-flounder-wired.ngrok-free.app/api/v1/swagger/doc.json"),
	))
	port := os.Getenv("PORT")
	if port == "" {
		port = "8080" // Default port if not specified
	}

	wrapped := use(mux, handler.LoggingMiddleware)

	log.Printf("Starting server on port %s...\n", port)
	if err := http.ListenAndServe(":"+port, wrapped); err != nil {
		log.Fatalf("Could not start server: %s\n", err)
	}
}

func use(r *http.ServeMux, middlewares ...func(next http.Handler) http.Handler) http.Handler {
	var s http.Handler
	s = r

	for _, mw := range middlewares {
		s = mw(s)
	}

	return s
}
