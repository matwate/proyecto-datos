// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "termsOfService": "http://swagger.io/terms/",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/v1/login": {
            "post": {
                "description": "Authenticates a student using their email and TI (Tarjeta de Identidad).",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Authentication"
                ],
                "summary": "Student Login",
                "parameters": [
                    {
                        "description": "Login Credentials",
                        "name": "login",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/handler.LoginRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Successfully authenticated. Returns student details.",
                        "schema": {
                            "$ref": "#/definitions/db.Estudiante"
                        }
                    },
                    "400": {
                        "description": "Invalid request body",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "401": {
                        "description": "Invalid credentials (user not found or TI mismatch)",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "405": {
                        "description": "Method not allowed",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Internal server error during login",
                        "schema": {
                            "$ref": "#/definitions/handler.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "db.Estudiante": {
            "type": "object",
            "properties": {
                "apellido": {
                    "type": "string"
                },
                "correo": {
                    "type": "string"
                },
                "estudianteID": {
                    "type": "integer"
                },
                "fechaRegistro": {
                    "$ref": "#/definitions/pgtype.Timestamp"
                },
                "nombre": {
                    "type": "string"
                },
                "programaAcademico": {
                    "type": "string"
                },
                "semestre": {
                    "$ref": "#/definitions/pgtype.Int4"
                },
                "ti": {
                    "$ref": "#/definitions/pgtype.Int4"
                }
            }
        },
        "handler.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string",
                    "example": "Descriptive error message"
                }
            }
        },
        "handler.LoginRequest": {
            "type": "object",
            "properties": {
                "correo": {
                    "description": "Correo is the email of the student.",
                    "type": "string",
                    "example": "test@urosario.edu.co"
                },
                "ti": {
                    "description": "TI is the student's identity number.",
                    "type": "integer",
                    "example": 123456789
                }
            }
        },
        "pgtype.InfinityModifier": {
            "type": "integer",
            "enum": [
                1,
                0,
                -1
            ],
            "x-enum-varnames": [
                "Infinity",
                "Finite",
                "NegativeInfinity"
            ]
        },
        "pgtype.Int4": {
            "type": "object",
            "properties": {
                "int32": {
                    "type": "integer"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        },
        "pgtype.Timestamp": {
            "type": "object",
            "properties": {
                "infinityModifier": {
                    "$ref": "#/definitions/pgtype.InfinityModifier"
                },
                "time": {
                    "description": "Time zone will be ignored when encoding to PostgreSQL.",
                    "type": "string"
                },
                "valid": {
                    "type": "boolean"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "amazed-flounder-wired.ngrok-free.app",
	BasePath:         "/api/",
	Schemes:          []string{"http"},
	Title:            "Proyecto de Ingenieria de  Datos API",
	Description:      "This is the API for my project.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
